// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"syscall"

	"code.cloudfoundry.org/winc/container/state"
)

type WinSyscall struct {
	OpenProcessStub        func(uint32, bool, uint32) (syscall.Handle, error)
	openProcessMutex       sync.RWMutex
	openProcessArgsForCall []struct {
		arg1 uint32
		arg2 bool
		arg3 uint32
	}
	openProcessReturns struct {
		result1 syscall.Handle
		result2 error
	}
	openProcessReturnsOnCall map[int]struct {
		result1 syscall.Handle
		result2 error
	}
	GetProcessTimesStub        func(syscall.Handle, *syscall.Filetime, *syscall.Filetime, *syscall.Filetime, *syscall.Filetime) error
	getProcessTimesMutex       sync.RWMutex
	getProcessTimesArgsForCall []struct {
		arg1 syscall.Handle
		arg2 *syscall.Filetime
		arg3 *syscall.Filetime
		arg4 *syscall.Filetime
		arg5 *syscall.Filetime
	}
	getProcessTimesReturns struct {
		result1 error
	}
	getProcessTimesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WinSyscall) OpenProcess(arg1 uint32, arg2 bool, arg3 uint32) (syscall.Handle, error) {
	fake.openProcessMutex.Lock()
	ret, specificReturn := fake.openProcessReturnsOnCall[len(fake.openProcessArgsForCall)]
	fake.openProcessArgsForCall = append(fake.openProcessArgsForCall, struct {
		arg1 uint32
		arg2 bool
		arg3 uint32
	}{arg1, arg2, arg3})
	fake.recordInvocation("OpenProcess", []interface{}{arg1, arg2, arg3})
	fake.openProcessMutex.Unlock()
	if fake.OpenProcessStub != nil {
		return fake.OpenProcessStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.openProcessReturns.result1, fake.openProcessReturns.result2
}

func (fake *WinSyscall) OpenProcessCallCount() int {
	fake.openProcessMutex.RLock()
	defer fake.openProcessMutex.RUnlock()
	return len(fake.openProcessArgsForCall)
}

func (fake *WinSyscall) OpenProcessArgsForCall(i int) (uint32, bool, uint32) {
	fake.openProcessMutex.RLock()
	defer fake.openProcessMutex.RUnlock()
	return fake.openProcessArgsForCall[i].arg1, fake.openProcessArgsForCall[i].arg2, fake.openProcessArgsForCall[i].arg3
}

func (fake *WinSyscall) OpenProcessReturns(result1 syscall.Handle, result2 error) {
	fake.OpenProcessStub = nil
	fake.openProcessReturns = struct {
		result1 syscall.Handle
		result2 error
	}{result1, result2}
}

func (fake *WinSyscall) OpenProcessReturnsOnCall(i int, result1 syscall.Handle, result2 error) {
	fake.OpenProcessStub = nil
	if fake.openProcessReturnsOnCall == nil {
		fake.openProcessReturnsOnCall = make(map[int]struct {
			result1 syscall.Handle
			result2 error
		})
	}
	fake.openProcessReturnsOnCall[i] = struct {
		result1 syscall.Handle
		result2 error
	}{result1, result2}
}

func (fake *WinSyscall) GetProcessTimes(arg1 syscall.Handle, arg2 *syscall.Filetime, arg3 *syscall.Filetime, arg4 *syscall.Filetime, arg5 *syscall.Filetime) error {
	fake.getProcessTimesMutex.Lock()
	ret, specificReturn := fake.getProcessTimesReturnsOnCall[len(fake.getProcessTimesArgsForCall)]
	fake.getProcessTimesArgsForCall = append(fake.getProcessTimesArgsForCall, struct {
		arg1 syscall.Handle
		arg2 *syscall.Filetime
		arg3 *syscall.Filetime
		arg4 *syscall.Filetime
		arg5 *syscall.Filetime
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("GetProcessTimes", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getProcessTimesMutex.Unlock()
	if fake.GetProcessTimesStub != nil {
		return fake.GetProcessTimesStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getProcessTimesReturns.result1
}

func (fake *WinSyscall) GetProcessTimesCallCount() int {
	fake.getProcessTimesMutex.RLock()
	defer fake.getProcessTimesMutex.RUnlock()
	return len(fake.getProcessTimesArgsForCall)
}

func (fake *WinSyscall) GetProcessTimesArgsForCall(i int) (syscall.Handle, *syscall.Filetime, *syscall.Filetime, *syscall.Filetime, *syscall.Filetime) {
	fake.getProcessTimesMutex.RLock()
	defer fake.getProcessTimesMutex.RUnlock()
	return fake.getProcessTimesArgsForCall[i].arg1, fake.getProcessTimesArgsForCall[i].arg2, fake.getProcessTimesArgsForCall[i].arg3, fake.getProcessTimesArgsForCall[i].arg4, fake.getProcessTimesArgsForCall[i].arg5
}

func (fake *WinSyscall) GetProcessTimesReturns(result1 error) {
	fake.GetProcessTimesStub = nil
	fake.getProcessTimesReturns = struct {
		result1 error
	}{result1}
}

func (fake *WinSyscall) GetProcessTimesReturnsOnCall(i int, result1 error) {
	fake.GetProcessTimesStub = nil
	if fake.getProcessTimesReturnsOnCall == nil {
		fake.getProcessTimesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getProcessTimesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WinSyscall) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openProcessMutex.RLock()
	defer fake.openProcessMutex.RUnlock()
	fake.getProcessTimesMutex.RLock()
	defer fake.getProcessTimesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WinSyscall) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.WinSyscall = new(WinSyscall)
